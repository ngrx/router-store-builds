{"version":3,"file":"ngrx-router-store.umd.js","sources":["ng://@ngrx/router-store/src/actions.ts","ng://@ngrx/router-store/src/reducer.ts","ng://@ngrx/router-store/src/serializers/base.ts","ng://@ngrx/router-store/src/serializers/default_serializer.ts","ng://@ngrx/router-store/src/serializers/minimal_serializer.ts","ng://@ngrx/router-store/src/router_store_module.ts","ng://@ngrx/router-store/src/router_selectors.ts"],"sourcesContent":["import {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  RoutesRecognized,\n} from '@angular/router';\n\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\nimport { createAction, props } from '@ngrx/store';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport const ROUTER_REQUEST = '@ngrx/router-store/request';\n\n/**\n * Payload of ROUTER_REQUEST\n */\nexport type RouterRequestPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationStart;\n};\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nexport type RouterRequestAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_REQUEST;\n  payload: RouterRequestPayload<T>;\n};\n\nexport const routerRequestAction = createAction(\n  ROUTER_REQUEST,\n  props<{ payload: RouterRequestPayload<SerializedRouterStateSnapshot> }>()\n);\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n\nexport const routerNavigationAction = createAction(\n  ROUTER_NAVIGATION,\n  props<{ payload: RouterNavigationPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = '@ngrx/router-store/cancel';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport type RouterCancelAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};\n\nexport const routerCancelAction = createAction(\n  ROUTER_CANCEL,\n  props<{ payload: RouterCancelPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = '@ngrx/router-store/error';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};\n\nexport const routerErrorAction = createAction(\n  ROUTER_ERROR,\n  props<{ payload: RouterErrorPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport const ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\n\n/**\n * Payload of ROUTER_NAVIGATED.\n */\nexport type RouterNavigatedPayload<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  routerState: T;\n  event: NavigationEnd;\n};\n\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nexport type RouterNavigatedAction<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  type: typeof ROUTER_NAVIGATED;\n  payload: RouterNavigatedPayload<T>;\n};\n\nexport const routerNavigatedAction = createAction(\n  ROUTER_NAVIGATED,\n  props<{ payload: RouterNavigatedPayload<SerializedRouterStateSnapshot> }>()\n);\n\n/**\n * A union type of router actions.\n */\nexport type RouterAction<\n  T,\n  V extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> =\n  | RouterRequestAction<V>\n  | RouterNavigationAction<V>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>\n  | RouterNavigatedAction<V>;\n","import { Action } from '@ngrx/store';\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATION,\n  RouterAction,\n} from './actions';\nimport { BaseRouterStoreState } from './serializers/base';\nimport { SerializedRouterStateSnapshot } from './serializers/default_serializer';\n\nexport type RouterReducerState<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = {\n  state: T;\n  navigationId: number;\n};\n\nexport function routerReducer<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n>(\n  state: RouterReducerState<T> | undefined,\n  action: Action\n): RouterReducerState<T> {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action as RouterAction<any, T>;\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id,\n      };\n    default:\n      return state as RouterReducerState<T>;\n  }\n}\n","import { RouterStateSnapshot } from '@angular/router';\n\n/**\n * Simple router state.\n * All custom router states / state serializers should have at least\n * the properties of this interface.\n */\nexport interface BaseRouterStoreState {\n  url: string;\n}\n\nexport abstract class RouterStateSerializer<\n  T extends BaseRouterStoreState = BaseRouterStoreState\n> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface SerializedRouterStateSnapshot extends BaseRouterStoreState {\n  root: ActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): ActivatedRouteSnapshot {\n    const children = route.children.map((c) => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            component: route.routeConfig.component,\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: (route.routeConfig\n        ? route.routeConfig.component\n        : undefined) as any,\n      root: undefined as any,\n      parent: undefined as any,\n      firstChild: children[0],\n      pathFromRoot: undefined as any,\n      children,\n    };\n  }\n}\n","import { RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { BaseRouterStoreState, RouterStateSerializer } from './base';\n\nexport interface MinimalActivatedRouteSnapshot {\n  routeConfig: ActivatedRouteSnapshot['routeConfig'];\n  url: ActivatedRouteSnapshot['url'];\n  params: ActivatedRouteSnapshot['params'];\n  queryParams: ActivatedRouteSnapshot['queryParams'];\n  fragment: ActivatedRouteSnapshot['fragment'];\n  data: ActivatedRouteSnapshot['data'];\n  outlet: ActivatedRouteSnapshot['outlet'];\n  firstChild?: MinimalActivatedRouteSnapshot;\n  children: MinimalActivatedRouteSnapshot[];\n}\n\nexport interface MinimalRouterStateSnapshot extends BaseRouterStoreState {\n  root: MinimalActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class MinimalRouterStateSerializer\n  implements RouterStateSerializer<MinimalRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): MinimalRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url,\n    };\n  }\n\n  private serializeRoute(\n    route: ActivatedRouteSnapshot\n  ): MinimalActivatedRouteSnapshot {\n    const children = route.children.map((c) => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig\n        ? {\n            path: route.routeConfig.path,\n            pathMatch: route.routeConfig.pathMatch,\n            redirectTo: route.routeConfig.redirectTo,\n            outlet: route.routeConfig.outlet,\n          }\n        : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children,\n    };\n  }\n}\n","import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  ErrorHandler,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  NavigationEnd,\n  Router,\n  RoutesRecognized,\n  NavigationStart,\n  Event,\n  RouterEvent,\n} from '@angular/router';\nimport { select, Selector, Store } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\n\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATED,\n  ROUTER_NAVIGATION,\n  ROUTER_REQUEST,\n} from './actions';\nimport { RouterReducerState } from './reducer';\nimport {\n  RouterStateSerializer,\n  BaseRouterStoreState,\n} from './serializers/base';\nimport {\n  DefaultRouterStateSerializer,\n  SerializedRouterStateSnapshot,\n} from './serializers/default_serializer';\nimport { MinimalRouterStateSerializer } from './serializers/minimal_serializer';\n\nexport type StateKeyOrSelector<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = string | Selector<any, RouterReducerState<T>>;\n\n/**\n * Full = Serializes the router event with DefaultRouterStateSerializer\n * Minimal = Serializes the router event with MinimalRouterStateSerializer\n */\nexport const enum RouterState {\n  Full,\n  Minimal,\n}\n\nexport interface StoreRouterConfig<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> {\n  stateKey?: StateKeyOrSelector<T>;\n  serializer?: new (...args: any[]) => RouterStateSerializer;\n  /**\n   * By default, ROUTER_NAVIGATION is dispatched before guards and resolvers run.\n   * Therefore, the action could run too soon, for example\n   * there may be a navigation cancel due to a guard saying the navigation is not allowed.\n   * To run ROUTER_NAVIGATION after guards and resolvers,\n   * set this property to NavigationActionTiming.PostActivation.\n   */\n  navigationActionTiming?: NavigationActionTiming;\n  /**\n   * Decides which router serializer should be used, if there is none provided, and the metadata on the dispatched @ngrx/router-store action payload.\n   * Set to `Full` to use the `DefaultRouterStateSerializer` and to set the angular router events as payload.\n   * Set to `Minimal` to use the `MinimalRouterStateSerializer` and to set a minimal router event with the navigation id and url as payload.\n   */\n  routerState?: RouterState;\n}\n\ninterface StoreRouterActionPayload {\n  event: RouterEvent;\n  routerState?: SerializedRouterStateSnapshot;\n  storeState?: any;\n}\n\nexport enum NavigationActionTiming {\n  PreActivation = 1,\n  PostActivation = 2,\n}\n\nexport const _ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Internal Configuration'\n);\nexport const ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Configuration'\n);\nexport const DEFAULT_ROUTER_FEATURENAME = 'router';\n\nexport function _createRouterConfig(\n  config: StoreRouterConfig\n): StoreRouterConfig {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config,\n  };\n}\n\nenum RouterTrigger {\n  NONE = 1,\n  ROUTER = 2,\n  STORE = 3,\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n@NgModule({})\nexport class StoreRouterConnectingModule {\n  static forRoot<\n    T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n  >(\n    config: StoreRouterConfig<T> = {}\n  ): ModuleWithProviders<StoreRouterConnectingModule> {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG],\n        },\n        {\n          provide: RouterStateSerializer,\n          useClass: config.serializer\n            ? config.serializer\n            : config.routerState === RouterState.Full\n            ? DefaultRouterStateSerializer\n            : MinimalRouterStateSerializer,\n        },\n      ],\n    };\n  }\n\n  private lastEvent: Event | null = null;\n  private routerState: SerializedRouterStateSnapshot | null = null;\n  private storeState: any;\n  private trigger = RouterTrigger.NONE;\n\n  private stateKey: StateKeyOrSelector;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private serializer: RouterStateSerializer<SerializedRouterStateSnapshot>,\n    private errorHandler: ErrorHandler,\n    @Inject(ROUTER_CONFIG) private config: StoreRouterConfig\n  ) {\n    this.stateKey = this.config.stateKey as StateKeyOrSelector;\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  private setUpStoreStateListener(): void {\n    this.store\n      .pipe(select(this.stateKey as any), withLatestFrom(this.store))\n      .subscribe(([routerStoreState, storeState]) => {\n        this.navigateIfNeeded(routerStoreState, storeState);\n      });\n  }\n\n  private navigateIfNeeded(\n    routerStoreState: RouterReducerState,\n    storeState: any\n  ): void {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n    if (this.router.url !== url) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch((error) => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  private setUpRouterEventsListener(): void {\n    const dispatchNavLate =\n      this.config.navigationActionTiming ===\n      NavigationActionTiming.PostActivation;\n    let routesRecognized: RoutesRecognized;\n\n    this.router.events\n      .pipe(withLatestFrom(this.store))\n      .subscribe(([event, storeState]) => {\n        this.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          this.routerState = this.serializer.serialize(\n            this.router.routerState.snapshot\n          );\n          if (this.trigger !== RouterTrigger.STORE) {\n            this.storeState = storeState;\n            this.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n            this.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          this.dispatchRouterCancel(event);\n          this.reset();\n        } else if (event instanceof NavigationError) {\n          this.dispatchRouterError(event);\n          this.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (this.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              this.dispatchRouterNavigation(routesRecognized);\n            }\n            this.dispatchRouterNavigated(event);\n          }\n          this.reset();\n        }\n      });\n  }\n\n  private dispatchRouterRequest(event: NavigationStart): void {\n    this.dispatchRouterAction(ROUTER_REQUEST, { event });\n  }\n\n  private dispatchRouterNavigation(\n    lastRoutesRecognized: RoutesRecognized\n  ): void {\n    const nextRouterState = this.serializer.serialize(\n      lastRoutesRecognized.state\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(\n        lastRoutesRecognized.id,\n        lastRoutesRecognized.url,\n        lastRoutesRecognized.urlAfterRedirects,\n        nextRouterState\n      ),\n    });\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event,\n    });\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`),\n    });\n  }\n\n  private dispatchRouterNavigated(event: NavigationEnd): void {\n    const routerState = this.serializer.serialize(\n      this.router.routerState.snapshot\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n  }\n\n  private dispatchRouterAction(\n    type: string,\n    payload: StoreRouterActionPayload\n  ): void {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event:\n            this.config.routerState === RouterState.Full\n              ? payload.event\n              : { id: payload.event.id, url: payload.event.url },\n        },\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  private reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n}\n","import { createSelector } from '@ngrx/store';\nimport { RouterStateSelectors } from './models';\nimport { RouterReducerState } from './reducer';\n\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V>;\nexport function getSelectors<V>(\n  selectState: (state: V) => RouterReducerState<any>\n): RouterStateSelectors<V> {\n  const selectRouterState = createSelector(\n    selectState,\n    (router) => router && router.state\n  );\n  const selectCurrentRoute = createSelector(\n    selectRouterState,\n    (routerState) => {\n      if (!routerState) {\n        return undefined;\n      }\n      let route = routerState.root;\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n      return route;\n    }\n  );\n  const selectFragment = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.fragment\n  );\n  const selectQueryParams = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.queryParams\n  );\n  const selectQueryParam = (param: string) =>\n    createSelector(selectQueryParams, (params) => params && params[param]);\n  const selectRouteParams = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.params\n  );\n  const selectRouteParam = (param: string) =>\n    createSelector(selectRouteParams, (params) => params && params[param]);\n  const selectRouteData = createSelector(\n    selectCurrentRoute,\n    (route) => route && route.data\n  );\n  const selectUrl = createSelector(\n    selectRouterState,\n    (routerState) => routerState && routerState.url\n  );\n\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl,\n  };\n}\n"],"names":["createAction","props","InjectionToken","select","withLatestFrom","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","NgModule","Store","Router","ErrorHandler","Inject","createSelector"],"mappings":"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"}