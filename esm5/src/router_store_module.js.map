{"version":3,"file":"router_store_module.js","sourceRoot":"ng://@ngrx/router-store/","sources":["src/router_store_module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,MAAM,EACN,cAAc,EAEd,QAAQ,EACR,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EACL,gBAAgB,EAChB,eAAe,EACf,aAAa,EACb,MAAM,EACN,gBAAgB,EAChB,eAAe,GAGhB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,MAAM,EAAY,KAAK,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAEhD,OAAO,EACL,aAAa,EACb,YAAY,EACZ,gBAAgB,EAChB,iBAAiB,EACjB,cAAc,GACf,MAAM,WAAW,CAAC;AAEnB,OAAO,EACL,qBAAqB,GAEtB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,4BAA4B,GAE7B,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,4BAA4B,EAAE,MAAM,kCAAkC,CAAC;;AAUhF,IAAkB,WAAW;IAC3B,IAAI,GAAA;IACJ,OAAO,GAAA;EACR;;;;;;AAED,uCAmBC;;;IAhBC,qCAAiC;;IACjC,uCAA2D;;;;;;;;;IAQ3D,mDAAgD;;;;;;;IAMhD,wCAA0B;;;;;AAG5B,uCAIC;;;IAHC,yCAAmB;;IACnB,+CAA4C;;IAC5C,8CAAiB;;;AAGnB,IAAY,sBAAsB;IAChC,aAAa,GAAI;IACjB,cAAc,GAAI;EACnB;;;;;AAED,MAAM,KAAO,cAAc,GAAG,IAAI,cAAc,CAC9C,2CAA2C,CAC5C;;AACD,MAAM,KAAO,aAAa,GAAG,IAAI,cAAc,CAC7C,kCAAkC,CACnC;;AACD,MAAM,KAAO,0BAA0B,GAAG,QAAQ;;;;;AAElD,MAAM,UAAU,mBAAmB,CACjC,MAAyB;IAEzB,kBACE,QAAQ,EAAE,0BAA0B,EACpC,UAAU,EAAE,4BAA4B,EACxC,sBAAsB,EAAE,sBAAsB,CAAC,aAAa,IACzD,MAAM,EACT;AACJ,CAAC;;AAED,IAAK,aAAa;IAChB,IAAI,GAAI;IACR,MAAM,GAAI;IACV,KAAK,GAAI;EACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CD;IAmCE,qCACU,KAAiB,EACjB,MAAc,EACd,UAAgE,EAChE,YAA0B,EACH,MAAyB;QAJhD,UAAK,GAAL,KAAK,CAAY;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAsD;QAChE,iBAAY,GAAZ,YAAY,CAAc;QACH,WAAM,GAAN,MAAM,CAAmB;QAZlD,cAAS,GAAiB,IAAI,CAAC;QAC/B,gBAAW,GAAyC,IAAI,CAAC;QAEzD,YAAO,GAAG,aAAa,CAAC,IAAI,CAAC;QAWnC,IAAI,CAAC,QAAQ,GAAG,mBAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAsB,CAAC;QAE3D,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACnC,CAAC;;;;;;IA5CM,mCAAO;;;;;IAAd,UAGE,MAAiC;QAAjC,uBAAA,EAAA,WAAiC;QAEjC,OAAO;YACL,QAAQ,EAAE,2BAA2B;YACrC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE;gBAC7C;oBACE,OAAO,EAAE,aAAa;oBACtB,UAAU,EAAE,mBAAmB;oBAC/B,IAAI,EAAE,CAAC,cAAc,CAAC;iBACvB;gBACD;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,MAAM,CAAC,UAAU;wBACzB,CAAC,CAAC,MAAM,CAAC,UAAU;wBACnB,CAAC,CAAC,MAAM,CAAC,WAAW,iBAAqB;4BACvC,CAAC,CAAC,4BAA4B;4BAC9B,CAAC,CAAC,4BAA4B;iBACnC;aACF;SACF,CAAC;IACJ,CAAC;;;;;IAsBO,6DAAuB;;;;IAA/B;QAAA,iBASC;QARC,IAAI,CAAC,KAAK;aACP,IAAI,CACH,MAAM,CAAC,mBAAA,IAAI,CAAC,QAAQ,EAAO,CAAC,EAC5B,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAC3B;aACA,SAAS;;;;QAAC,UAAC,EAA8B;gBAA9B,kBAA8B,EAA7B,wBAAgB,EAAE,kBAAU;YACvC,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACtD,CAAC,EAAC,CAAC;IACP,CAAC;;;;;;;IAEO,sDAAgB;;;;;;IAAxB,UACE,gBAAoC,EACpC,UAAe;QAFjB,iBAsBC;QAlBC,IAAI,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;YAChD,OAAO;SACR;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,aAAa,CAAC,MAAM,EAAE;YACzC,OAAO;SACR;QACD,IAAI,IAAI,CAAC,SAAS,YAAY,eAAe,EAAE;YAC7C,OAAO;SACR;;YAEK,GAAG,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,EAAE;YAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK;;;;YAAC,UAAA,KAAK;gBACxC,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,EAAC,CAAC;SACJ;IACH,CAAC;;;;;IAEO,+DAAyB;;;;IAAjC;QAAA,iBAyCC;;YAxCO,eAAe,GACnB,IAAI,CAAC,MAAM,CAAC,sBAAsB;YAClC,sBAAsB,CAAC,cAAc;;YACnC,gBAAkC;QAEtC,IAAI,CAAC,MAAM,CAAC,MAAM;aACf,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC,SAAS;;;;QAAC,UAAC,EAAmB;gBAAnB,kBAAmB,EAAlB,aAAK,EAAE,kBAAU;YAC5B,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAEvB,IAAI,KAAK,YAAY,eAAe,EAAE;gBACpC,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,UAAU,CAAC,SAAS,CAC1C,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACjC,CAAC;gBACF,IAAI,KAAI,CAAC,OAAO,KAAK,aAAa,CAAC,KAAK,EAAE;oBACxC,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,KAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;iBACnC;aACF;iBAAM,IAAI,KAAK,YAAY,gBAAgB,EAAE;gBAC5C,gBAAgB,GAAG,KAAK,CAAC;gBAEzB,IAAI,CAAC,eAAe,IAAI,KAAI,CAAC,OAAO,KAAK,aAAa,CAAC,KAAK,EAAE;oBAC5D,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;iBACtC;aACF;iBAAM,IAAI,KAAK,YAAY,gBAAgB,EAAE;gBAC5C,KAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;gBACjC,KAAI,CAAC,KAAK,EAAE,CAAC;aACd;iBAAM,IAAI,KAAK,YAAY,eAAe,EAAE;gBAC3C,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAChC,KAAI,CAAC,KAAK,EAAE,CAAC;aACd;iBAAM,IAAI,KAAK,YAAY,aAAa,EAAE;gBACzC,IAAI,KAAI,CAAC,OAAO,KAAK,aAAa,CAAC,KAAK,EAAE;oBACxC,IAAI,eAAe,EAAE;wBACnB,KAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;qBACjD;oBACD,KAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;iBACrC;gBACD,KAAI,CAAC,KAAK,EAAE,CAAC;aACd;QACH,CAAC,EAAC,CAAC;IACP,CAAC;;;;;;IAEO,2DAAqB;;;;;IAA7B,UAA8B,KAAsB;QAClD,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IACvD,CAAC;;;;;;IAEO,8DAAwB;;;;;IAAhC,UACE,oBAAsC;;YAEhC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAC/C,oBAAoB,CAAC,KAAK,CAC3B;QACD,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE;YAC3C,WAAW,EAAE,eAAe;YAC5B,KAAK,EAAE,IAAI,gBAAgB,CACzB,oBAAoB,CAAC,EAAE,EACvB,oBAAoB,CAAC,GAAG,EACxB,oBAAoB,CAAC,iBAAiB,EACtC,eAAe,CAChB;SACF,CAAC,CAAC;IACL,CAAC;;;;;;IAEO,0DAAoB;;;;;IAA5B,UAA6B,KAAuB;QAClD,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE;YACvC,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,KAAK,OAAA;SACN,CAAC,CAAC;IACL,CAAC;;;;;;IAEO,yDAAmB;;;;;IAA3B,UAA4B,KAAsB;QAChD,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE;YACtC,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,KAAK,EAAE,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,EAAE,KAAG,KAAO,CAAC;SAC5D,CAAC,CAAC;IACL,CAAC;;;;;;IAEO,6DAAuB;;;;;IAA/B,UAAgC,KAAoB;;YAC5C,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAC3C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACjC;QACD,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,EAAE,EAAE,KAAK,OAAA,EAAE,WAAW,aAAA,EAAE,CAAC,CAAC;IACtE,CAAC;;;;;;;IAEO,0DAAoB;;;;;;IAA5B,UACE,IAAY,EACZ,OAAiC;QAEjC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC;QACpC,IAAI;YACF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAClB,IAAI,MAAA;gBACJ,OAAO,sBACL,WAAW,EAAE,IAAI,CAAC,WAAW,IAC1B,OAAO,KACV,KAAK,EACH,IAAI,CAAC,MAAM,CAAC,WAAW,iBAAqB;wBAC1C,CAAC,CAAC,OAAO,CAAC,KAAK;wBACf,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GACvD;aACF,CAAC,CAAC;SACJ;gBAAS;YACR,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC;SACnC;IACH,CAAC;;;;;IAEO,2CAAK;;;;IAAb;QACE,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;;gBAlMF,QAAQ,SAAC,EAAE;;;;gBArIe,KAAK;gBAN9B,MAAM;gBAkBN,qBAAqB;gBAxBrB,YAAY;gDAyLT,MAAM,SAAC,aAAa;;IA2JzB,kCAAC;CAAA,AAnMD,IAmMC;SAlMY,2BAA2B;;;;;;IA2BtC,gDAAuC;;;;;IACvC,kDAAiE;;;;;IACjE,iDAAwB;;;;;IACxB,8CAAqC;;;;;IAErC,+CAAqC;;;;;IAGnC,4CAAyB;;;;;IACzB,6CAAsB;;;;;IACtB,iDAAwE;;;;;IACxE,mDAAkC;;;;;IAClC,6CAAwD","sourcesContent":["import {\n  Inject,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  ErrorHandler,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  NavigationEnd,\n  Router,\n  RoutesRecognized,\n  NavigationStart,\n  Event,\n  RouterEvent,\n} from '@angular/router';\nimport { select, Selector, Store } from '@ngrx/store';\nimport { withLatestFrom } from 'rxjs/operators';\n\nimport {\n  ROUTER_CANCEL,\n  ROUTER_ERROR,\n  ROUTER_NAVIGATED,\n  ROUTER_NAVIGATION,\n  ROUTER_REQUEST,\n} from './actions';\nimport { RouterReducerState } from './reducer';\nimport {\n  RouterStateSerializer,\n  BaseRouterStoreState,\n} from './serializers/base';\nimport {\n  DefaultRouterStateSerializer,\n  SerializedRouterStateSnapshot,\n} from './serializers/default_serializer';\nimport { MinimalRouterStateSerializer } from './serializers/minimal_serializer';\n\nexport type StateKeyOrSelector<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> = string | Selector<any, RouterReducerState<T>>;\n\n/**\n * Full = Serializes the router event with DefaultRouterStateSerializer\n * Minimal = Serializes the router event with MinimalRouterStateSerializer\n */\nexport const enum RouterState {\n  Full,\n  Minimal,\n}\n\nexport interface StoreRouterConfig<\n  T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n> {\n  stateKey?: StateKeyOrSelector<T>;\n  serializer?: new (...args: any[]) => RouterStateSerializer;\n  /**\n   * By default, ROUTER_NAVIGATION is dispatched before guards and resolvers run.\n   * Therefore, the action could run too soon, for example\n   * there may be a navigation cancel due to a guard saying the navigation is not allowed.\n   * To run ROUTER_NAVIGATION after guards and resolvers,\n   * set this property to NavigationActionTiming.PostActivation.\n   */\n  navigationActionTiming?: NavigationActionTiming;\n  /**\n   * Decides which router serializer should be used, if there is none provided, and the metadata on the dispatched @ngrx/router-store action payload.\n   * Set to `Full` to use the `DefaultRouterStateSerializer` and to set the angular router events as payload.\n   * Set to `Minimal` to use the `MinimalRouterStateSerializer` and to set a minimal router event with the navigation id and url as payload.\n   */\n  routerState?: RouterState;\n}\n\ninterface StoreRouterActionPayload {\n  event: RouterEvent;\n  routerState?: SerializedRouterStateSnapshot;\n  storeState?: any;\n}\n\nexport enum NavigationActionTiming {\n  PreActivation = 1,\n  PostActivation = 2,\n}\n\nexport const _ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Internal Configuration'\n);\nexport const ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Configuration'\n);\nexport const DEFAULT_ROUTER_FEATURENAME = 'router';\n\nexport function _createRouterConfig(\n  config: StoreRouterConfig\n): StoreRouterConfig {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config,\n  };\n}\n\nenum RouterTrigger {\n  NONE = 1,\n  ROUTER = 2,\n  STORE = 3,\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n@NgModule({})\nexport class StoreRouterConnectingModule {\n  static forRoot<\n    T extends BaseRouterStoreState = SerializedRouterStateSnapshot\n  >(\n    config: StoreRouterConfig<T> = {}\n  ): ModuleWithProviders<StoreRouterConnectingModule> {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n          provide: ROUTER_CONFIG,\n          useFactory: _createRouterConfig,\n          deps: [_ROUTER_CONFIG],\n        },\n        {\n          provide: RouterStateSerializer,\n          useClass: config.serializer\n            ? config.serializer\n            : config.routerState === RouterState.Full\n              ? DefaultRouterStateSerializer\n              : MinimalRouterStateSerializer,\n        },\n      ],\n    };\n  }\n\n  private lastEvent: Event | null = null;\n  private routerState: SerializedRouterStateSnapshot | null = null;\n  private storeState: any;\n  private trigger = RouterTrigger.NONE;\n\n  private stateKey: StateKeyOrSelector;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private serializer: RouterStateSerializer<SerializedRouterStateSnapshot>,\n    private errorHandler: ErrorHandler,\n    @Inject(ROUTER_CONFIG) private config: StoreRouterConfig\n  ) {\n    this.stateKey = this.config.stateKey as StateKeyOrSelector;\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  private setUpStoreStateListener(): void {\n    this.store\n      .pipe(\n        select(this.stateKey as any),\n        withLatestFrom(this.store)\n      )\n      .subscribe(([routerStoreState, storeState]) => {\n        this.navigateIfNeeded(routerStoreState, storeState);\n      });\n  }\n\n  private navigateIfNeeded(\n    routerStoreState: RouterReducerState,\n    storeState: any\n  ): void {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n    if (this.router.url !== url) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  private setUpRouterEventsListener(): void {\n    const dispatchNavLate =\n      this.config.navigationActionTiming ===\n      NavigationActionTiming.PostActivation;\n    let routesRecognized: RoutesRecognized;\n\n    this.router.events\n      .pipe(withLatestFrom(this.store))\n      .subscribe(([event, storeState]) => {\n        this.lastEvent = event;\n\n        if (event instanceof NavigationStart) {\n          this.routerState = this.serializer.serialize(\n            this.router.routerState.snapshot\n          );\n          if (this.trigger !== RouterTrigger.STORE) {\n            this.storeState = storeState;\n            this.dispatchRouterRequest(event);\n          }\n        } else if (event instanceof RoutesRecognized) {\n          routesRecognized = event;\n\n          if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n            this.dispatchRouterNavigation(event);\n          }\n        } else if (event instanceof NavigationCancel) {\n          this.dispatchRouterCancel(event);\n          this.reset();\n        } else if (event instanceof NavigationError) {\n          this.dispatchRouterError(event);\n          this.reset();\n        } else if (event instanceof NavigationEnd) {\n          if (this.trigger !== RouterTrigger.STORE) {\n            if (dispatchNavLate) {\n              this.dispatchRouterNavigation(routesRecognized);\n            }\n            this.dispatchRouterNavigated(event);\n          }\n          this.reset();\n        }\n      });\n  }\n\n  private dispatchRouterRequest(event: NavigationStart): void {\n    this.dispatchRouterAction(ROUTER_REQUEST, { event });\n  }\n\n  private dispatchRouterNavigation(\n    lastRoutesRecognized: RoutesRecognized\n  ): void {\n    const nextRouterState = this.serializer.serialize(\n      lastRoutesRecognized.state\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(\n        lastRoutesRecognized.id,\n        lastRoutesRecognized.url,\n        lastRoutesRecognized.urlAfterRedirects,\n        nextRouterState\n      ),\n    });\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event,\n    });\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`),\n    });\n  }\n\n  private dispatchRouterNavigated(event: NavigationEnd): void {\n    const routerState = this.serializer.serialize(\n      this.router.routerState.snapshot\n    );\n    this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n  }\n\n  private dispatchRouterAction(\n    type: string,\n    payload: StoreRouterActionPayload\n  ): void {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event:\n            this.config.routerState === RouterState.Full\n              ? payload.event\n              : { id: payload.event.id, url: payload.event.url },\n        },\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  private reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n}\n"]}